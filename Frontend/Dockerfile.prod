# First stage - inherit current image from an alpine image containing node (for latest versions use node:alpine):
FROM node:18-alpine3.16 AS build-stage

# Install typescript compiler globally for compiling to JavaScript:
RUN npm i -g typescript

# Set /tmp folder as the Current Directory for compiling the project:
WORKDIR /tmp

# Copy local package.json & package-lock.json into /tmp:
COPY package*.json /tmp

# Install npm dependencies & devDependencies (required for TypeScript compiler):
RUN npm i

# Copy project local files (first dot) into /tmp:
COPY . /tmp

# Compile project resides in /tmp (WORKDIR) which generates JavaScript inside /tmp/build as stated in tsconfig.json:
RUN tsc

# -----------------------------------------------------------------------

# Second stage - will overrun first stage installations after complete:
FROM node:18-alpine3.16 AS production-stage

# Create an empty directory for project files and set it as the Current Directory:
WORKDIR /app

# Copy package.json & package-lock.json from previous stage's /tmp into /app:
COPY --from=build-stage /tmp/package*.json /app

# RUN npm run build

# Copy JavaScript files from previous stage's /tmp/build into /app:
# COPY --from=build-stage /tmp/build /app

# Install npm dependencies (without devDependencies):
RUN npm i --only=prod

# Execute "node /app/app.js" inside /app (WORKDIR) when container starts ("npm start" won't work cause it contains nodemon + ts-node starting command):
ENTRYPOINT node /app/app.js
